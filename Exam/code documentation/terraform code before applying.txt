#provider

provider "google" {
  project = "sky2100eksamen24"
  region = "europe-north1"
}


#VPC

resource "google_compute_network" "vpc_network" {
  name = "vpc-network"  
  auto_create_subnetworks = false
}



#Subnet

resource "google_compute_subnetwork" "initial_subnet" {
  name = "initial-subnet"
  ip_cidr_range = "10.0.0.0/24"
  network = google_compute_network.vpc_network.id
  region = "europe-north1"

  #Flow logs
  enable_flow_logs = true

  log_config {
    aggregation_interval = "INTERVAL_5_SEC"
    flow_sampling        = 1.0
    metadata             = "INCLUDE_ALL_METADATA"
  }
}


#Firewall

resource "google_compute_firewall" "allow_http" {
  name = "allow-http"
  network = google_compute_network.vpc_network.name

  allow {
    protocol = "tcp"
    ports = ["80", "443"]
  }

  source_ranges = ["0.0.0.0/0"]
  target_tags = ["http-server"]
}


#VM  

resource "google_compute_instance" "vm" {
  name = "vm"
  machine_type = "e2-micro"
  tags = ["http-server"]

  #Connecting to subnet
  network_interface {
  subnetwork = google_compute_subnetwork.initial_subnet.name
     access_config {
       nat_ip = google_compute_address.static_ip.address
     }
  }

  #Disk

  boot_disk {
    initialize_params {
      image = "ubuntu-os-cloud/ubuntu-2004-lts"
    }
  }
}

#static ip adress

resource "google_compute_address" "static_ip" {
  name   = "static-ip"
  region = "europe-north1"
}


#Installing and starting up NGinx server

metadata_startup_script = <<-EOT
    apt-get update
    apt-get install -y nginx
    systemctl start nginx
  EOT


#Snapshot backups

resource "google_compute_resource_policy" "snapshot" {
  name   = "daily-snapshot"
  region = "europe-north1"

  snapshot_schedule_policy {
    schedule {
      daily_schedule {
        days_in_cycle = 1
        start_time    = "12:00"
     }
   }
    retention_policy {
      max_retention_days = 7
      on_source_disk_delete = "KEEP_AUTO_SNAPSHOTS"
    }
  }
}


#Backend service 

resource "google_compute_backend_service" "backend" {
  name        = "backend"
  description = "Backend service"
  protocol    = "HTTP"
  timeout_sec = 10

  security_policy = google_compute_security_policy.cloud_armor.id

  backend {
    group = google_compute_instance.vm.self_link
  }

  health_checks = [google_compute_health_check.basic_check.self_link]
}


#health check

resource "google_compute_health_check" "http_health_check" {
  name = "http_health-check"

  http_health_check {
    request_path = "/"
    port         = 80
  }
}


#url map

resource "google_compute_url_map" "url_map" {
  name            = "url-map"
  default_service = google_compute_backend_service.backend.self_link
}


#http proxy

resource "google_compute_target_http_proxy" "http_proxy" {
  name   = "http-proxy"
  url_map = google_compute_url_map.url_map.self_link
}


#forwarding rule

resource "google_compute_global_forwarding_rule" "forwarding_rule" {
  name       = "forwarding-rule"
  target     = google_compute_target_http_proxy.http_proxy.self_link
  port_range = "80"
}


#Cloud Armor Policy / WAF

resource "google_compute_security_policy" "cloud_armor" {
  name        = "cloud-armor"
  description = "Cloud armour policy as web application firewall"

  rule {
    action   = "allow"
    priority = 1000
    match {
      versioned_expr = "SRC_IPS_V1"
      config {
        src_ip_ranges = ["0.0.0.0/0"]
      }
    }
  }


  
  rule {
    action   = "deny"
    priority = 1001
    match {
      expr {
        expression = "evaluatePreconfiguredExpr('xss-stable')"
      }
    }
  }

  rule {
    action   = "deny"
    priority = 1002
    match {
      expr {
        expression = "evaluatePreconfiguredExpr('sqli-stable')"
      }
    }
  }

  rule {
    action   = "deny"
    priority = 1003
    match {
      expr {
        expression = "evaluatePreconfiguredExpr('lfi-stable')"
      }
    }
  }

 rule {
    action   = "deny" 
    priority = 2147483647
  }
}
